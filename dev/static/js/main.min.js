document.addEventListener('DOMContentLoaded', function () {
    ///////// Test #1 //////////


    // Cookies
    function getCookie(name) {
        let matches = document.cookie.match(new RegExp(
            "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
        ));
        return matches ? decodeURIComponent(matches[1]) : undefined;
    }

    function setCookie(name, value, options = {}) {
        options = {
            // path: '/',
            samesite: 'strict',
            // при необходимости добавьте другие значения по умолчанию
            ...options
        };
        if (options.expires && options.expires.toUTCString) {
            options.expires = options.expires.toUTCString();
        }
        let updatedCookie = encodeURIComponent(name) + "=" + encodeURIComponent(value);
        for (let optionKey in options) {
            updatedCookie += "; " + optionKey;
            let optionValue = options[optionKey];
            if (optionValue !== true) {
                updatedCookie += "=" + optionValue;
            }
        }
        document.cookie = updatedCookie;
    }

    function deleteCookie(name) {
        setCookie(name, "", {
            'max-age': -1
        })
    }
    // end Cookies

    let numVotes            = 2,
        sumVotes            = 6,
        userRate            = getCookie('user-rate'),
        averageRating       = sumVotes / numVotes,
        roundAverage        = Math.round(averageRating),
        stars               = document.getElementsByClassName('rating__icon'),
        averangeIndicator   = document.querySelector('.rating__num'),
        userMessBlock       = document.querySelector('.rating__user'),
        userMessNum         = document.querySelector('.rating__user-num'),
        starsBlock          = document.querySelector('.rating__stars'),
        showCurrentRating   = (target) => {
                                    for (let s = 0; s < target; s++) {
                                        stars[s].style.fill = '#EABD45';
                                    }
                                },
        showEmtyAllStars    = () => {
                                    for (let s = 0; s < stars.length; s++) {
                                        stars[s].style.fill = 'none';
                                    }
                                },
        showCurrentUserRate = () => {
                                    showEmtyAllStars()
                                    showCurrentRating(roundAverage);
                                    averangeIndicator.textContent = roundAverage;
                                    userMessNum.textContent = userRate;
                                    userMessBlock.style.display = 'block';
                                    setCookie('user-rate', userRate);
                                    starsBlock.style.cursor = 'default'
                                };

        if (getCookie('user-rate')) {
            showCurrentUserRate();
        }
        
        averangeIndicator.textContent = roundAverage;
        showCurrentRating(roundAverage);
        
        
        [...stars].forEach((star, i) => {
            star.addEventListener('mouseover', () => {
                if (!userRate) {
                    showEmtyAllStars()
                    showCurrentRating(i + 1)
                }
            })
            star.addEventListener('click', function () {
                if (!userRate) {
                    userRate = i + 1;
                    numVotes += 1;
                    sumVotes += userRate;
                    averageRating = sumVotes / numVotes;
                    roundAverage = Math.round(averageRating);
                    showCurrentUserRate();
                
                console.log(roundAverage)
            }
        })
    });
    starsBlock.addEventListener('mouseleave', () => {
        if (!userRate) {

            showEmtyAllStars()
        }
        showCurrentRating(roundAverage);
    });


    ///////// Test #1 (end) //////////
    
    
    ///////// Test #2 //////////

    let line        = document.querySelector('.progress-bar__line'),
        progressIn  = document.querySelector('.progress-bar__percentage--in'),
        progressOut = document.querySelector('.progress-bar__percentage--out'),
        incBtn      = document.querySelector('.progress-bar__btn'),
        width       = 1;
        
        
        function move(target) {
            let id = setInterval(boostProgress, 10),
            sumTarget = width + target;
            
            function boostProgress() {
                if (width >= sumTarget || width >= 100) {
                    clearInterval(id);
                } else {
                    width += 1;
                    line.style.width = width + '%';
                    progressIn.textContent = width + '%';
                    progressOut.textContent = width + '%';
                }
                if (width >= 17) {
                    progressOut.className += ' progress-bar__percentage--right'
                }
            }
            
        }
        
        incBtn.addEventListener('click', () => {
            let targetWidth = Number(document.querySelector('.progress-bar__select').value);
            move(targetWidth)
        })

    ///////// Test #2 (end) //////////

    
    ///////// Test #4  //////////

    let search,
    searchForm = document.querySelector('.video__search'),
    result = document.querySelector('.video__result');
    
    document.querySelector('.video__text-input').value = '';

searchForm.addEventListener('submit', (e) => {
    search = document.querySelector('.video__text-input').value;
    e.preventDefault();
    if (search) {
        const request = new XMLHttpRequest();
        const url = "video-search.php";
        const params = "search=" + search;
        request.responseType =	"json";
        request.open("POST", url, true);
        request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        request.addEventListener("readystatechange", () => {
            if (request.readyState === 4 && request.status === 200) {
                let obj = request.response;
                result.textContent = '';
                obj.forEach(item => {
                    let card = document.createElement('div');
                    card.className = 'video__card';
                    if (item.service == 'yt') {
                        card.innerHTML = `<div class="video__frame"><iframe src="https://www.youtube.com/embed/${item.id}" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div><div class='video__title'>${item.title}</div>`;
                    }
                    result.append(card)
                });
            }
        });
        request.send(params);
    }

})

    ///////// Test #4 (end) //////////

});

// Полифилы

// forEach IE 11
if ('NodeList' in window && !NodeList.prototype.forEach) {
    console.info('polyfill for IE11');
    NodeList.prototype.forEach = function (callback, thisArg) {
        thisArg = thisArg || window;
        for (var i = 0; i < this.length; i++) {
            callback.call(thisArg, this[i], i, this);
        }
    };
}

// closest IE 11
(function () {
    if (!Element.prototype.closest) {
        Element.prototype.closest = function (css) {
            var node = this;
            while (node) {
                if (node.matches(css)) return node;
                else node = node.parentElement;
            }
            return null;
        };
    }
})();

// matches IE 11
(function () {
    if (!Element.prototype.matches) {
        Element.prototype.matches = Element.prototype.matchesSelector ||
            Element.prototype.webkitMatchesSelector ||
            Element.prototype.mozMatchesSelector ||
            Element.prototype.msMatchesSelector;
    }
})();

//Array.form IE 11
if (!Array.from) {
    Array.from = function (object) {
        'use strict';
        return [].slice.call(object);
    };
}